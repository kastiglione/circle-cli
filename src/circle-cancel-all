#!/usr/bin/env python

from helpers import circle
from helpers import credentials
from helpers import git
import argparse
import requests
import signal
import sys

CANCEL_TEMPLATE = "https://circleci.com/api/v1.1/project/{}/{}/{}/cancel"
BUILDS_TEMPLATE = "https://circleci.com/api/v1.1/project/{}/{}/{}"


def signal_handle(sig, frame):
    sys.exit(0)


def main(provider, repo, branch):
    password = credentials.credentials()
    params = {"circle-token": password}
    headers = {"Content-Type": "application/json"}
    response = circle.get_builds(provider, repo, 100, branch, not branch)

    for blob in response:
        if blob["lifecycle"] == "finished" or blob["canceled"]:
            continue

        build_number = blob["build_num"]
        if not build_number:
            print("Invalid empty build number: {}".format(blob))
            sys.exit(1)

        url = CANCEL_TEMPLATE.format(provider, repo, build_number)
        response = requests.post(url, params=params, headers=headers)
        if response.status_code == 200:
            print("Canceled build #{}".format(build_number))
        else:
            print("Failed to cancel build #{}".format(build_number))
            print(response.json())
            sys.exit(1)


signal.signal(signal.SIGINT, signal_handle)
if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-b", "--branch")
    parser.add_argument("-p", "--provider", default="github")
    parser.add_argument("-r", "--repo", default=git.current_repo_path())
    arguments = parser.parse_args()

    if arguments.repo is None:
        parser.error("Repo is required\n\n{}".format(parser.format_help()))

    main(arguments.provider, arguments.repo, arguments.branch)
